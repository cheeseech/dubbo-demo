// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 使用proto3版本
syntax = "proto3";

// 如果为false，则只为该.proto文件生成一个.java文件，并且为顶级消息、服务和枚举生成的所有Java类/枚举等将嵌套在外部类中
// 如果为true，则将为顶级消息、服务和枚举生成的每个Java类/枚举等生成单独的.java文件，并且为此.proto文件生成的java“外部类”将不包含任何嵌套类/枚举等。
option java_multiple_files = true;
// 生成包名
option java_package = "io.grpc.examples.helloworld";
// 生成外部类名
option java_outer_classname = "HelloWorldProto";
// 生成 Objective-C 代码时的类名前缀。它的作用是为生成的 Objective-C 类名添加一个前缀，以避免与项目中其他类的命名冲突
option objc_class_prefix = "XMH";
// 命名空间
package helloworld;

// 定义了一个 gRPC 服务，名为 Greeter，其中包含一个名为 SayHello 的 RPC 方法
service Greeter {
  // 定义了一个名为 SayHello 的 RPC 方法，该方法接受一个 HelloRequest 请求消息，并返回一个 HelloReply 响应消息
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// 定义了一个消息类型，名为 HelloRequest，用于在 Greeter 服务的 SayHello 方法中传递用户的名称
message HelloRequest {
  string name = 1;
}

// 定义了另一个消息类型，名为 HelloReply，用于表示服务响应消息
message HelloReply {
  string message = 1;
}
